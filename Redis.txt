一.准备知识:
    1.常用的技术分类:
        1.1 解决功能性的问题“:
            Java jsp RDBMS Tomcat HTML Linux Jdbc SVN
        1.2解决扩展性的问题:
            Struts Spring SpringMVC Hibernate Mybatis
        1.3解决性能的问题:
            NoSQL Java线程 Hadoop Nginx MQ ElasticSearch
    2.NoSQL入门和概述:
        2.1入门概述:
            1)互联网时代背景下 大机遇，为什么用nosql:
                ①单机MySQL的美好年代:
                    Web1.0的时代，数据访问量很有限，用一夫当关的高性能的单点服务器可以解决大部分问题。
                ②Memcached(缓存)+MySQL+垂直拆分:
                    利用缓存技术解决性能问题。
                ③Mysql主从读写分离:
                    主从复制+读写分离。
                ④分表分库+水平拆分+mysql集群:
                    由于写的性能出现了瓶颈。
                ⑤MySQL的扩展性瓶颈:
                    大数据下IO压力大，表结构更改困难。
                ⑥今天是什么样子？？
                    多台服务器，每个服务器各尽其职。
                    读写分离+读写分离。
                    负载均衡:
                        注意:session存在哪？
                            方案1:存在cookie里:
                                不安全。
                                网络负担效率低。
                            方案2:存在文件服务器或者数据库里
                                大量的IO效率问题。
                            方案3:session复制:
                                session数据冗余。
                                节点越多浪费越大
                            方案4:缓存数据库:
                                完全在内存中，速度快。
                                数据结构简单。
                                减少io的读操作。
                    打破了传统关系型数据库以业务逻辑为依据的存储模式，而针对不同数据结构类型改为以性能为最优先的存储方式。
                ⑦为什么用NoSQL:
                    我们如果要对这些用户数据进行挖掘，那SQL数据库已经不适合这些应用了, NoSQL数据库的发展也却能很好的处理这些大的数据。
            2) 是什么:
                NoSQL(NoSQL = Not Only SQL )，意即“不仅仅是SQL”，
                泛指非关系型的数据库。
                NoSQL 不依赖业务逻辑方式存储，而以简单的key-value模式存储。因此大大的增加了数据库的扩展能力。
                不遵循SQL标准。
                不支持ACID。
                远超于SQL的性能。
            3) 能干嘛:
                易扩展
                大数据量高性能
                多样灵活的数据模型
                注:
                    RDBMS vs NoSQL
                    RDBMS:
                        - 高度组织化结构化数据
                        - 结构化查询语言（SQL）
                        - 数据和关系都存储在单独的表中。
                        - 数据操纵语言，数据定义语言
                        - 严格的一致性
                        - 基础事务
                    NoSQL:
                        - 代表着不仅仅是SQL
                        - 没有声明性查询语言
                        - 没有预定义的模式
                        - 键 - 值对存储，列存储，文档存储，图形数据库
                        - 最终一致性，而非ACID属性
                        - 非结构化和不可预知的数据
                        - CAP定理
                        - 高性能，高可用性和可伸缩性
                    NoSQL不适用场景:
                        需要事务支持
                        基于sql的结构化查询存储，处理复杂的关系,需要即席查询。
                用不着sql的和用了sql也不行的情况，请考虑用NoSql。
            4) 常用NoSQL:
                ①Memcached:
                    很早出现的NoSql数据库
                    数据都在内存中，一般不持久化
                    支持简单的key-value模式
                    一般是作为缓存数据库辅助持久化的数据库
                ②Redis:
                    几乎覆盖了Memcached的绝大部分功能
                    数据都在内存中，支持持久化，主要用作备份恢复
                    除了支持简单的key-value模式，还支持多种数据结构的存储，比如 list、set、hash、zset等。
                    一般是作为缓存数据库辅助持久化的数据库
                ③mongoDB:
                    高性能、开源、模式自由(schema  free)的文档型数据库
                    数据都在内存中， 如果内存不足，把不常用的数据保存到硬盘
                    虽然是key-value模式，但是对value（尤其是json）提供了丰富的查询功能
                    支持二进制数据及大型对象
                    可以根据数据的特点替代RDBMS ，成为独立的数据库。或者配合RDBMS，存储特定的数据。
                ④HBase:
                    HBase是Hadoop项目中的数据库。它用于需要对大量的数据进行随机、实时的读写操作的场景中。
                    HBase的目标就是处理数据量非常庞大的表，可以用普通的计算机处理超过10亿行数据，还可处理有数百万列元素的数据表。
                ⑤Cassandra:
                    Apache Cassandra是一款免费的开源NoSQL数据库，其设计目的在于管理由大量商用服务器构建起来的庞大集群上的海量数据集
                    (数据量通常达到PB级别)。在众多显著特性当中，Cassandra最为卓越的长处是对写入及读取操作进行规模调整，
                    而且其不强调主集群的设计思路能够以相对直观的方式简化各集群的创建与扩展流程。
                ⑥Neo4j:
                    主要应用：社会关系，公共交通网络，地图及网络拓谱。
        2.2 3V+3高:
            1)大数据时代的3V
                海量Volume
                多样Variety
                实时Velocity
            2)互联网需求的3高
                高并发
                高可扩
                高性能
        2.3 当下的NoSQL经典应用
            1)当下的应用是sql和nosql一起使用
            2)阿里巴巴中文站商品信息如何存放
                ①商品基本信息
                    名称、价格，出厂日期，生产厂商等
                    关系型数据库：mysql/oracle目前淘宝在去O化(也即拿掉Oracle)，
                    注意，淘宝内部用的Mysql是里面的大牛自己改造过的
                ②商品描述、详情、评价信息(多文字类)
                    多文字信息描述类，IO读写性能变差
                    文档数据库MongDB中
                ③商品的图片
                    商品图片展现类
                    分布式的文件系统中
                        淘宝自己的TFS
                        Google的GFS
                        Hadoop的HDFS
                ④商品的关键字
                    搜索引擎，淘宝内用
                    ISearch
                ⑤商品的波段性的热点高频信息
                    内存数据库
                    Tair、Redis、Memcache
                ⑥商品的交易、价格计算、积分累计
                    外部系统，外部第3方支付接口
                    支付宝
        2.4 NoSQL数据库的四大分类:
                KV键值：典型介绍
                    新浪：BerkeleyDB+redis
                    美团：redis+tair
                    阿里、百度：memcache+redis
                文档型数据库(bson格式比较多)：典型介绍
                    CouchDB
                    MongoDB
                列存储数据库
                    Cassandra, HBase
                    分布式文件系统
                图关系数据库
                    它不是放图形的，放的是关系比如:朋友圈社交网络、广告推荐系统
                    社交网络，推荐系统等。专注于构建关系图谱
                    Neo4J, InfoGrid
             四者对比:
                分类      Examples举例      典型应用场景      数据类型        优点      缺点
             键值(key     tokyo            内容缓存，主要用   key指向       查询速度快  数据无结构化，
             -value)     Cabinet/Tyrant,  于处理大量数据的   Value的键                通常只被当作字
                         Redis,           高访问负载，也用   值对，通常                符串或者二进制
                         Voldemort,       于一些日志系统等   用hash                   数据
                         Oracle BDB       等               table来实
                                                           现

             列存储数据    Cassandra,       分布式的文件系统    以列簇式存    查找速度快， 功能相对局限
             库           HBase,Riak                        储，将同一    可扩展性强，
                                                            列数据存在    更容易进行分
                                                            一起         布式扩展

             文档型数据    CouchDB,         Web应用(与key-    Key-Value    数据结构要求  查询性能不高，
             库           MongoDB          Value类似,Value  对应的键值     不严格，表结  而且缺乏统一的
                                          是结构化的,不同     对，Value    构可变，不需   查询语法。
                                          的是数据库能够了    为结构化数    要像关系型数
                                          解Value的内容      据           据库一样需要
                                                                        预先定义表结
                                                                        构

             图形        Neo4J,InfoGrid,   社交网络，推荐系    图结构       利用图结构相   很多时候需要对
             (Graph)数   Infinite Graph    统等。专注于构建                关算法。比如   整个图做计算才
             据库                          关系图谱                       最短路径寻     能得出需要的信
                                                                        址，N度关系查  息，而且这种结
                                                                        找等          构不太好做分布
                                                                                     式的集群方案。
        2.5 在分布式数据库中CAP原理CAP+BASE:
             1)传统的ACID分别是什么
                A (Atomicity) 原子性
                C (Consistency) 一致性
                I (Isolation) 独立性
                D (Durability) 持久性
             2)CAP
                C:Consistency（强一致性）
                A:Availability（可用性）
                P:Partition tolerance（分区容错性）
                CAP的3进2
             3)BASE:
                BASE就是为了解决关系数据库强一致性引起的问题而引起的可用性降低而提出的解决方案。
                基本可用（Basically Available）
                软状态（Soft state）
                最终一致（Eventually consistent）
             4)分布式+集群简介:
                分布式系统（distributed system）
                    由多台计算机和通信的软件组件通过计算机网络连接（本地网络或广域网）组成。
                简单来讲：
                    分布式：不同的多台服务器上面部署不同的服务模块（工程），他们之间通过Rpc/Rmi之间通信和调用，对外提供服务和组内协作。
                    集群：不同的多台服务器上面部署相同的服务模块，通过分布式调度软件进行统一的调度，对外提供服务和访问。
二.Redis入门介绍
    1.入门概述:
        1.1是什么
            Redis:REmote DIctionary Server(远程字典服务器)
            是完全开源免费的，用C语言编写的，遵守BSD协议， 是一个高性能的(key/value)分布式内存数据库，基于内存运行
            并支持持久化的NoSQL数据库，是当前最热门的NoSql数据库之一, 也被人们称为数据结构服务器
        1.2 Redis 与其他 key - value 缓存产品有以下三个特点
            Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用
            Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储
            Redis支持数据的备份，即master-slave模式的数据备份
        1.3能干嘛:
            1)内存存储和持久化：redis支持异步将内存中的数据写到硬盘上，同时不影响继续服务
            2)取最新N个数据的操作，如：可以将最新的10条评论的ID放在Redis的List集合里面
            3)模拟类似于HttpSession这种需要设定过期时间的功能
            4)发布、订阅消息系统
            5)定时器、计数器
            6)配合关系型数据库做高速缓存:
                高频次，热门访问的数据，降低数据库IO
                分布式架构，做session共享。
            7)由于其拥有持久化能力，利用其多样的数据结构存储特定的数据:
                最新N个数据:通过List实现按自然时间排序的数据
                排行榜，Top N:利用zset(有序集合)
                时效性的数据，比如手机验证码:Expire过期
                计数器，秒杀:原子性，自然方法INCR，DECR
                去除大量数据中的重复数据:利用Set集合
                构建队列:利用list集合
                发布订阅消息系统:pub/sub模式
        1.4去哪下:
            Http://redis.io/
            Http://www.redis.cn/
    2.VMWare+VMTools千里之行始于足下
          VMWare虚拟机的安装
          CentOS或者RedHad5的安装
          VMTools的安装
          设置共享目录
          上述环境都OK后开始进行Redis的服务器安装配置
    3.Redis的安装
        3.1Windows版安装:
            重要提示：
                由于企业里面做Redis开发，99%都是Linux版的运用和安装， 几乎不会涉及到Windows版，上一步的讲解只是为了知识的完整性， Windows版不作为重点，同学可以下去自己玩，企业实战就认一个版：Linux
        3.2Linux版安装
            1)下载获得redis-3.0.4.tar.gz后将它放入我们的Linux目录/opt
            2)/opt目录下，解压命令:tar -zxvf redis-3.0.4.tar.gz
            3)解压完成后出现文件夹：redis-3.0.4
            4)进入目录:cd redis-3.0.4
            5)在redis-3.0.4目录下执行make命令
                注意:运行make命令时出现的错误:gcc:命令未找到:
                    能上网: yum install gcc-c++
                    不能上网:
                        执行:
                            cd  /media/CentOS_6.8_Final/Packages （路径跟centos5不同）   进入安装包目录 
                        依次执行以下：
                            rpm -ivh mpfr-2.4.1-6.el6.x86_64.rpm
                            rpm -ivh cpp-4.4.7-17.el6.x86_64.rpm
                            rpm -ivh ppl-0.10.2-11.el6.x86_64.rpm
                            rpm -ivh cloog-ppl-0.15.7-1.2.el6.x86_64.rpm
                            rpm -ivh gcc-4.4.7-17.el6.x86_64.rpm
                    在redis-3.2.5目录下再次执行make命令:
                        出现的错误:Jemalloc/jemalloc.h：没有那个文件
                        解决方案：运行make distclean之后再 make
            6)如果make完成后继续执行make install
            7)查看默认安装目录：usr/local/bin
                Redis-benchmark:性能测试工具，可以在自己本子运行，看看自己本子性能如何
                服务启动起来后执行
                Redis-check-aof：修复有问题的AOF文件，rdb和aof后面讲
                Redis-check-dump：修复有问题的dump.rdb文件
                Redis-cli：客户端，操作入口
                Redis-sentinel：redis集群使用
                Redis-server：Redis服务器启动命令
            8)启动
                修改redis.conf文件将里面的daemonize no 改成 yes，让服务在后台启动
                将默认的redis.conf拷贝到自己定义好的一个路径下，比如/myconf
                启动:
                   redis-server /myredis/redis.conf
                连通测试
                    /usr/local/bin目录下运行redis-server，运行拷贝出存放了自定义conf文件目录下的redis.conf文件
                关闭:
                    单实例关闭：redis-cli shutdown
                    多实例关闭，指定端口关闭:redis-cli -p 6379 shutdown
    4.Redis启动后杂项基础知识讲解
        4.1单进程
            单进程模型来处理客户端的请求。对读写等事件的响应 是通过对epoll函数的包装来做到的。Redis的实际处理速度完全依靠主进程的执行效率
            Epoll是Linux内核为处理大批量文件描述符而作了改进的epoll，是Linux下多路复用IO接口select/poll的增强版本， 它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率。
        4.2 默认16个数据库，类似数组下表从零开始，初始默认使用零号库
        4.3 Select命令切换数据库
        4.4 Dbsize查看当前数据库的key的数量
        4.5 Flushdb：清空当前库
        4.6 Flushall；通杀全部库
        4.7 统一密码管理，16个库都是同样密码，要么都OK要么一个也连接不上
        4.8 Redis索引都是从零开始
三.Redis数据类型:
    1.key
        1)keys *
            查看当前库的所有键
        2)exists <key>
            判断某个键是否存在
        3)type <key>
            查看键的类型
        4)del <key>
            删除某个键
        5)expire <key> <seconds>
            为键值设置过期时间，单位秒。
        6)ttl <key>
            查看还有多少秒过期，-1表示永不过期，-2表示已过期
        7)dbsize
            查看当前数据库的key的数量
        8)flushdb
            清空当前库
        9)flushall
            通杀全部库
    2.String:
        1)介绍:
            String是Redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。
            String类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。
            String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M
        2)get <key>
            查询对应键值
        3)set <key> <value>
            添加键值对
        4)append <key> <value>
            将给定的<value>追加到原值的末尾
        5)strlen <key>
            获取值的长度
        6)setnx <key> <value>
            只有在key不存在时设置key的值
        7)incr <key>
            将key中存储的数字值增1
            只能对数字值操作，如果为空，新增值为1
        8)decr <key>
            将key中存储的数字值减1
            只能对数字值操作，如果为空，新增值为-1
        9)incrby/decrby <key> <步长>
            将key中存储的数字值增减，自定义步长
        10)mset <key1> <value1> <key2> <value2> ...
            同时设置一个或多个key-value对
        11)mget <key1> <key2> <key3> ...
            同时获取一个或多个value
        12)msetnx <key1> <value1> <key2> <value2> ...
            同时设置一个或多个key-value对，当且仅当所有给定
            key都不存在。
        13)getrange <key> <起始位置> <结束位置>
            获取值的范围,类似java中substring
        14)setrange <key> <起始位置> <value>
            用<value> 覆盖<key> 所储存的字符串值，从<起始位置>开始。
        15)setex <key> <过期时间> <value>
            设置键值的同时，设置过期时间，单位秒
        16)getset <key> <value>
            以新换旧，设置了新值同时获取旧值。
        注意:
            原子性:
                所谓原子操作是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）。
                在单线程中， 能够在单条指令中完成的操作都可以认为是" 原子操作"，因为中断只能发生于指令之间。
                在多线程中，不能被其它进程（线程）打断的操作就叫原子操作。
            Redis单命令的原子性主要得益于Redis的单线程
    3.List:
        单键多值
        Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。
        它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。
        1)lpush/rpush <key> <value1> <value2> <value3> ...
            从左边/右边插入一个或多个值。
        2)lpop/rpop <key>
            从左边/右边吐出一个值。
            值在键在，值光键亡。
        3)rpoplpush <key1> <key2>
            从<key1>列表右边吐出一个值，插到<key2>列表左边。
        4)lrange <key> <index> <stop>
            按照索引下标获得元素(从左到右)
        5)lindex <key> <index>
            按照索引下标获得单个元素(从左到右)
        6)llen <key>
            获取列表长度
        7)linsert <key> before <value> <newvalue>
            在<value>的后面插入<newvalue> 插入值
        8)lrem <key> <n> <value>
            从左边删除n个value(从左到右)
    4.Set:
        Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以自动排重的，当你需要存储一个列表数据，
        又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。
        Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表,所以添加，删除，查找的复杂度都是O(1)。
        1)sadd <key> <value1> <value2>...
            将一个或多个member元素加入到集合key当中，已经存在于集合的member元素将被忽略。
        2)smembers <key>
            取出该集合的所有值。
        3)sismember <key> <value>
            判断集合<key> 是否为含有该<value>值，有返回1，没有返回0
        4)scard <key>
            返回该集合的元素个数。
        5)srem <key> <value1> <value2> ...
            删除集合中的某个元素
        6)spop <key>
            随机从该集合中吐出一个值
        7)srandmember <key> <n>
            随机从该集合中取出n个值。
            不会从集合中删除。
        8)sinter <key1> <key2>
            返回两个集合的交集元素。
        9)sunion <key1> <key2>
            返回两个集合的并集元素。
        10)sdiff <key1> <key2>
            返回两个集合的差集元素。
    5.Hash:
        Redis  hash 是一个键值对集合。
        Redis hash是一个string类型的field和value的映射表，
        hash特别适合用于存储对象。
        类似Java里面的Map<String,Object>
        1)hset <key> <field> <value>
            给<key>集合中<field>键赋值<value>
        2)hget <key1> <field>
            从<key>集合<field>取出value
        3)hmset <key1> <field1> <value1> <field2> <value2> ....
            批量设置hash的值
        4)hexists key <field>
            查看哈希表key中，给定域field是否存在。
        5)hkeys <key>
            列出该hash集合的所有field
        6)hvals <key>
            列出该hash集合的所有value
        7)hincrby <key> <field> <increment>
            为哈希表key中的域field 的值加上增量increment
        8)hsetnx <key> <field> <value>
            将哈希表key中的域field 的值设置为value，当且仅当域field不存在
    6.zset(sorted set):
         Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合。
         不同之处是有序集合的没有成员都关联了一个评分（score） ，这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。
         集合的成员是唯一的，但是评分可以是重复了 。
         因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。
         访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表
        1)zadd <key> <score1> <value1> <score2> <value2> ...
            将一个或多个member元素及其score值加入到有序集key当中。
        2)zrange <key> <start> <stop> [WITHSCORES]
            返回有序集key中。下标在<start> <stop>之间的元素
            带WITHSCORES，可以让分数一起和值返回到结果集。
        3)zrangebyscore key min max[withscores] [limit offset count]
            返回有序集key中，所有score值介于min和max之间
            (包括等于min或max)的成员。有序集成员按score值递增
            (从小到大)次序排列。
        4)zrevrangebyscore key max min [withscores] [limit offset count]
            同上，改为从大到小排列。
        5)zincrby <key> <increment> <value>
            为元素的score加上增量
        6)zrem <key> <value>
            删除该集合下，指定值的元素
        7)zcount <key> <min> <max>
            统计该集合，分数区间内的元素个数
        8)zrank <key> <value>
            返回该值在集合中排名，从0开始
四.解析配置文件 redis.conf
    1.它在哪
        地址:
            /opt/redis-3.2.5
        为什么我将它拷贝出来单独执行？
          由于每一个项目的配置文件可能不一样所以拷贝单独的一份出来。
    2.Units单位:
        1)配置大小单位,开头定义了一些基本的度量单位，只支持bytes，不支持bit
        2)对大小写不敏感
    3.INCLUDES包含:
        和我们的Struts2配置文件类似，可以通过includes包含，redis.conf可以作为总闸，包含其他
        把公用的配置文件提取出来。
    4.GENERAL通用:
        Daemonize:
            是否为后台进程。
        Pidfile:
            存放pid文件的位置，每个实例会产出一个不同pid文件。
        Port:
            端口号。
        Tcp-backlog:
            可以理解是一个请求到达后至到接受进程处理前的队列。
            backlog队列总和=未完成三次握手队列+已经完成三次握手队列。
            高并发环境tcp-backlog 设置值跟超时时限内的Redis吞吐量决定。
        Timeout:
            一个空闲的客户端维持多少秒会关闭，0为永不关闭。
        Bind:
            默认情况bind=127.0.0.1只能接受本机的访问请求
            不写的情况下，无限制接受任何ip地址的访问
            生产环境肯定要写你应用服务器的地址
            如果开启了protected-mode，那么在没有设定bind ip且没有设密码的情况下，Redis只允许接受本机的相应
        Tcp-keepalive:
            对访问客户端的一种心跳检测，每个n秒检测一次。
            官方推荐设为60秒。
        Loglevel:
            四个级别根据使用阶段来选择，生产环境选择notice 或者warning
        Logfile:
            日志文件名称
        Syslog:
            是否把日志输出到syslog中
        Syslog-ident:
            日志的标志
        Syslog-facility:
            输出日志的设备
        Databases:
            设置库的数量 默认16
    5.SNAPSHOTTING快照
        Save:
            save 秒钟 写操作次数
            禁用
        Stop-writes-on-bgsave-error:
            当Redis无法写入磁盘的话，直接关掉Redis的写操作。
        rdbcompression:
            进行rdb保存时，将文件压缩。
        rdbchecksum:
            在存储快照后，还可以让Redis使用CRC64算法来进行数据校验，
            但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，
            可以关闭此功能
        dbfilename:
            rdb文件保存时的名称。
        dir:
            rdb和aof文件的存放位置。
    6.REPLICATION复制
    7.SECURITY安全
        访问密码的查看、设置和取消:
            config get requirepass
            config set requirepass "123456"
            auth 123456
    8.LIMITS限制
        Maxclients:
            最大客户端连接数
        Maxmemory:
            设置Redis可以使用的内存量。一旦到达内存使用上限，Redis将会试图移除内部数据，移除规则可以通过
        Maxmemory-policy:
            volatile-lru：使用LRU算法移除key，只对设置了过期时间的键
            allkeys-lru：使用LRU算法移除key
            volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键
            allkeys-random：移除随机的key
            volatile-ttl：移除那些TTL值最小的key，即那些最近要过期的key
            noeviction：不进行移除。针对写操作，只是返回错误信息
        Maxmemory-samples:
            设置样本数量，LRU算法和最小TTL算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小。
            一般设置3到7的数字，数值越小样本越不准确，但是性能消耗也越小。
    APPEND ONLY MODE追加:
        Appendfsync:
            Always：
                同步持久化 每次发生数据变更会被立即记录到磁盘  性能较差但数据完整性比较好
            Everysec：
                出厂默认推荐，异步操作，每秒记录   如果一秒内宕机，有数据丢失
            No
        No-appendfsync-on-rewrite：
            重写时是否可以运用Appendfsync，用默认no即可，保证数据安全性。
        Auto-aof-rewrite-min-size：
            设置重写的基准值
        Auto-aof-rewrite-percentage：
            设置重写的基准值
五.Java的Redis客户端Jedis:
    1.jedis所需要的jar包
        Commons-pool-1.6.jar
        jedis-2.1.0.jar
    2.用windows中Eclipse连接虚拟机的Redis的注意事项:
        禁用Linux的防火墙:
            Linux里执行命令 service iptables stop
        redis.conf中注释 bind 127.0.0.1,然后 protect-mode no。
    3.测试代码写在jedisTest项目中。
六.Redis的事务:
    1.是什么:
        可以一次执行多个命令，本质是一组命令的集合。一个事务中的 所有命令都会序列化，按顺序地串行化执行而不会被其它命令插入，不许加塞
    2.能干嘛:
        一个队列中，一次性、顺序性、排他性的执行一系列命令
    3.怎么玩
        常用命令:
            discard:
                取消事务，放弃执行事务块的所有命令。
            exec:
                执行所有事务块内的命令。
            multi:
                标记一个事务块的开始。
            unwatch:
                取消WATCH命令对所有key的监视。
            watch key[key...]
                监视一个(或多个)key,如果在事务执行之前这个(或这些)key被其他命令所改动，那么事务将被打打断。
        Case1：正常执行
        Case2：放弃事务:
            discard。
        Case3：全体连坐
            编译时出错。
        Case4：冤头债主
            运行时出错，那一条命令不执行，其他的正常执行。
        Case5：watch监控
            悲观锁/乐观锁/CAS(Check And Set)
                悲观锁(Pessimistic Lock):
                    顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，
                    这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，
                    比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。
                乐观锁(Optimistic Lock):
                    顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，
                    但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。
                    乐观锁适用于多读的应用类型，这样可以提高吞吐量。
                    Redis就是利用这种check-and-set机制实现事务的。
                CAS
        初始化信用卡可用余额和欠额
        无加塞篡改，先监控再开启multi， 保证两笔金额变动在同一个事务内
        有加塞篡改
            监控了key，如果key被修改了，后面一个事务的执行失效
        unwatch
        一旦执行了exec之前加的监控锁都会被取消掉了
        小结:
            Watch指令:
                类似乐观锁，事务提交时，如果Key的值已被别的客户端改变，
                比如某个list已被别的客户端push/pop过了，整个事务队列都不会被执行。
            通过WATCH命令在事务执行之前监控了多个Keys，倘若在WATCH之后有任何Key的值发生了变化，
            EXEC命令执行的事务都将被放弃，同时返回Nullmulti-bulk应答以通知调用者事务执行失败
    3阶段
        开启：以MULTI开始一个事务
        入队：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面
        执行：由EXEC命令触发事务
    3特性
        单独的隔离操作：
            事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。
        没有隔离级别的概念：
            队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，
            也就不存在”事务内的查询要看到事务里的更新，在事务外查询不能看到”这个让人万分头痛的问题
        不保证原子性：
            redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚
七.Redis杂项知识:
    1.链接池:
        节省每次连接redis服务带来的消耗，把连接好的实例反复利用。
        通过参数管理连接的行为。
        链接池参数:
            MaxTotal:
                控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；如
                果赋值为-1，则表示不限制;如果pool已经分配了MaxTotal个jedis实例，则此时pool的
                状态为exhausted
            maxIdle:
                控制一个pool最多有多少个状态为idle(空闲)的jedis实例;
            maxWaitMillis:
                表示当borrow一个jedis实例时，最大的等待毫秒数，如果超过等待时间，则直接抛
                JedisConnectionException;
            testOnBorrow:
                获取一个jedis实例的时候是否检查连接的可用性(ping());如果为true，则得到的jedis实例均可用的;
    2.LUA脚本:
        1)介绍:
            Lua 是一个小巧的脚本语言，Lua脚本可以很容易的被C/C++ 代码调用，也可以反过来调用C/C++的函数，Lua并没有提供强大的库，
            一个完整的Lua解释器不过200k，所以Lua不适合作为开发独立应用程序的语言，而是作为嵌入式脚本语言。
        2)应用场景:
            很多应用程序、游戏使用LUA作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。这其中包括魔兽争霸地图、魔兽世界、博德之门、愤怒的小鸟等众多游戏插件或外挂。
        3)LUA脚本在Redis中的优势:
            将复杂的或者多步的redis操作，写为一个脚本，一次提交给redis执行，减少反复连接redis的次数。提升性能。
            LUA脚本是类似redis事务，有一定的原子性，不会被其他命令插队，可以完成一些redis事务性的操作。
            但是注意redis的lua脚本功能，只有在2.6以上的版本才可以使用。
八.Redis的持久化
    1.RDB（Redis DataBase）
        1)是什么:
            在指定的时间间隔内将内存中的数据集快照写入磁盘， 也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里。
            它恢复时是将快照文件直接读到内存里。
        2)备份如何执行的:
            Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到 一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。
            整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能 如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方 式要比AOF方式更加的高效。
            RDB的缺点是最后一次持久化后的数据可能丢失。
        3)关于Fork:
            在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，
            Linux中引入了“写时复制技术”，一般情况父进程和子进程会共用同一段物理内存，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。
        注意:Rdb 保存的是dump.rdb文件
        4)配置位置:
            如何触发RDB快照
                配置文件中默认的快照配置
                冷拷贝后重新使用
                可以cp dump.rdb dump_new.rdb
            命令save或者是bgsave
                Save：save时只管保存，其它不管，全部阻塞
                BGSAVE：Redis会在后台异步进行快照操作， 快照同时还可以响应客户端请求。可以通过lastsave 命令获取最后一次成功执行快照的时间
                执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义
        5)如何恢复:
            将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可
            CONFIG GET dir获取目录
        6)优势:
            适合大规模的数据恢复
            对数据完整性和一致性要求不高
        7)劣势:
            在一定间隔时间做一次备份，所以如果redis意外down掉的话，就 会丢失最后一次快照后的所有修改
            Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑
        8)如何停止:
            动态所有停止RDB保存规则的方法：redis-cli config set save ""
        9)小总结:
            ①RDB是一个非常紧凑的文件。
            ②RDB在保存RDB文件时父进程唯一需要做的就是fork出一个子进程，接下来的工作全部由子进程
            来做，父进程不需要再做其他IO操作，所以RDB持久化方式可以最大化redis的性能。
            ③与AOF相比，在恢复大的数据集的时候，RDB方式会更快一些。
            ④数据丢失风险大。
            ⑤RDB需要经常fork子进程来保存数据集到硬盘上，当数据集比较大的时候，fork的过程是非常耗时的
            可能会导致Redis在一些毫秒级不能响应客户端请求
    2.AOF（Append Only File）
        1)是什么：
            以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)， 只许追加文件但不可以改写文件，
            redis启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作
        2)Aof保存的是appendonly.aof文件
        3)配置位置:
            AOF默认不开启，需要手动在配置文件中配置
            可以在redis.conf中配置文件名称，默认为 appendonly.aof(appendfilename)
            AOF文件的保存路径，同RDB的路径一致。
        4)AOF启动/修复/恢复
            正常恢复
                启动：设置Yes
                修改默认的appendonly no，改为yes
                将有数据的aof文件复制一份保存到对应目录(config get dir)
                恢复：重启redis然后重新加载
            异常恢复
                启动：设置Yes
                修改默认的appendonly no，改为yes
                备份被写坏的AOF文件
                修复：
                    Redis-check-aof --fix进行修复
                恢复：
                    重启redis然后重新加载
        5)Rewrite:
            是什么:
                AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制, 当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩，
                只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof
            重写原理:
                AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)， 遍历新进程的内存中数据，
                每条记录有一条的Set语句。重写aof文件的操作，并没有读取旧的aof文件， 而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，
                这点和快照有点类似
            触发机制:
                Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发
        6)同步策略:
            每修改同步：appendfsync always
                同步持久化 每次发生数据变更会被立即记录到磁盘  性能较差但数据完整性比较好。
            每秒同步：appendfsync everysec
                异步操作，每秒记录  如果一秒内宕机，有数据丢失
            不同步：appendfsync no
                从不同步,同步交给操作系统去执行。
        7)优点:
            备份机制更稳健，丢失数据概率更低。
            可读的日志文本，通过操作AOF文件，可以处理误操作。
        8)缺点:
            比起RDB占用更多的磁盘空间。
            恢复备份速度更慢。
            每次读写都同步的话，有一定的性能压力。
            存在个别Bug，造成恢复不能。
        9)小总结:
            ①AOF文件是一个只进行追加的日志文件。
            ②Redis可以在AOF文件体积变得过大时，自动地在后台对AOF进行重写。
            ③AOF文件有序地保存了对数据库执行的所有写入操作，这些写入操作以Redis协议的格式保存，
            因此AOF文件的内容非常容易被人读懂，对文件进行分析也很轻松。
            ④对于相同的数据集来说，AOF文件的体积通常要大于RDB文件的体积。
            ⑤根据所使用的fsync策略，AOF的速度可能会慢于RDB
    3.总结(Which one)
        1)官网建议:两个都开启。
        2)RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储
        3)AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些 命令来恢复原始的数据,
        AOF命令以redis协议追加保存每次写的操作到文件末尾. Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大
        4)只做缓存：
            如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式.
        5)同时开启两种持久化方式:
            在这种情况下,当redis重启的时候会优先载入AOF文件来恢复原始的数据,
            因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.
            RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。
            那要不要只使用AOF呢？
                作者建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)， 快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。
九.Redis的复制(Master/Slave):
    1.是什么
        行话：也就是我们所说的主从复制，主机数据更新后根据配置和策略， 自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主
    2.能干嘛
        读写分离,性能扩展。
        容灾恢复。
    3.怎么玩
        配从(库)不配主(库)
        从库配置：
            slaveof 主库IP 主库端口:
                成为某个实例的从服务器。
            注意:每次与master断开之后，都需要重新连接，除非你配置进redis.conf文件
            Info replication:
                打印主从复制的相关信息。
        修改配置文件细节操作:
            拷贝多个redis.conf文件
            开启daemonize yes
            Pid文件名字
            指定端口
            Log文件名字
            Dump.rdb名字
            Appendonly关掉或者换名字。
    4.常用3招
        1）一主二仆
            一个Master两个Slave
            日志查看
                主机日志
                备机日志
                info replication
            常见的问题:
                ①切入点问题？slave1、slave2是从头开始复制还是从切入点开始复制?比如从k4进来，那之前的123是否也可以复制
                    从头开始复制。
                ②从机是否可以写？set可否？
                    从机是不可以写的。
                ③主机shutdown后情况如何？从机是上位还是原地待命
                    从机是原地待命。
                ④主机又回来了后，主机新增记录，从机还能否顺利复制？
                    可以顺利复制。
                ⑤其中一台从机down后情况如何？依照原有它能跟上大部队吗？
                    不会。重新成为主机，除非从机的配置文件中配置主机的相关信息。
        2)薪火相传
            上一个Slave可以是下一个slave的Master，Slave同样可以接收其他 slaves的连接和同步请求，那么该slave作为了链条中下一个的master, 可以有效减轻master的写压力
            中途变更转向:会清除之前的数据，重新建立拷贝最新的
            Slaveof 新主库IP 新主库端口
            风险是一旦某个slave挂掉了，后面的slave都没法备份。
        3)反客为主
            当一个master挂掉后，后面的slave可以立刻升为master，其后面的slave不用做任何修改。。
            SLAVEOF no one:
                使当前数据库停止与其他数据库的同步，转成主数据库
    5.复制原理
        Slave启动成功连接到master后会发送一个sync命令
        Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令， 在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步
        全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。
        增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步
        但是只要是重新连接master,一次完全同步（全量复制)将被自动执行
    6.哨兵模式(sentinel)
        1)是什么:
            反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库
        2)怎么玩(使用步骤)
            调整为一主二仆模式
            自定义的/myredis目录下新建sentinel.conf文件，名字绝不能错
            配置哨兵,填写内容:
                sentinel monitor mymaster 127.0.0.1 6379 1
                其中mymaster为监控对象起的服务器名称，1为至少有多少个哨兵同意迁移的数量。
            启动哨兵:
                执行redis-sentinel /myredis/sentinel.conf
        3)故障恢复:
            ①新主登基:
                从下线的主服务的所有的从服务里面挑选一个从服务，将其转成主服务
                选择的条件依次为:
                    选择优先级靠前的。
                        优先级在redis.conf中salve-priority 100
                    选择偏移量最大的。
                        偏移量是指获得原主数据最多的
                    选择runid最小的从服务。
                        每个redis实例启动后都会随机生成一个40位的runid。
            ②群仆俯首:
                挑选出新的主服务之后，sentinel向原主服务的从服务发送slaveof新主服务的命令，复制到master
            ③旧主俯首:
                当已下线的服务重新上线时，sentinel会向其发送slaveof命令，让其成为新主的从机
    7.复制的缺点
        复制延时
十.Redis的集群:
    1.什么事集群:
        Redis集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1/N。
        Redis集群通过分区(partition)来提供一定程度的可用性(availability):
            即使集群中有一部分节点失效或者无法进行通讯，集群也可以继续处理命令请求。
    2.怎么做:
        1)安装ruby环境:
            ①依次执行在安装光盘下的Package目录(/media/CentOS_6.8_Final/Packages)下的rpm包:
                执行rpm -ivh compat-readline5-5.2-17.1.el6.x86_64.rpm
                执行rpm -ivh ruby-libs-1.8.7.374-4.el6_6.x86_64.rpm
                执行rpm -ivh ruby-1.8.7.374-4.el6_6.x86_64.rpm
                执行rpm -ivh ruby-irb-1.8.7.374-4.el6_6.x86_64.rpm
                执行rpm -ivh ruby-rdoc-1.8.7.374-4.el6_6.x86_64.rpm
                执行rpm -ivh rubygems-1.3.7-5.el6.noarch.rpm
            ②拷贝redis-3.2.0.gem到/opt目录下
            ③在opt目录下执行 gem install --local redis-3.2.0.gem
            ④制作6个实例，6379,6380,6381,6389,6390,6391
                拷贝多个redis.conf文件
                开启daemonize yes
                Pid文件名字
                指定端口
                Log文件名字
                Dump.rdb名字
                Appendonly 关掉或者换名字
            ⑤安装redis cluster配置修改
                cluster-enabled yes:
                    打开集群模式。
                cluster-config-file nodes-6379.conf:
                    设定节点配置文件名。
                cluster-node-timeout 15000:
                    设定节点失联时间，超过该时间(毫秒)，集群自动进行主从切换。
            ⑥将六个节点合成一个集群:
                组合之前，请确保所有redis实例启动后，nodes-xxxx.conf文件都正常。
                合体:
                    cd /opt/redis-3.2.5/src
                    ./redis-trib.rb create --replicas 1
                    192.168.61.129:6379   192.168.61.129:6380
                    192.168.61.129:6381   192.168.61.129:6389
                    192.168.61.129:6390   192.168.61.129:6391
                注意:此处不要用127.0.0.1，请用真实IP地址。
            注意:通过 cluster nodes 命令查看集群信息
    3.redis cluster 如何分配这6个节点?
        一个集群至少要有三个主节点。
        选项 --replices 1 表示我们希望为集群中每个主节点创建一个从节点。
        分配原则尽量保证每个主数据库运行在不同的IP地址，每个从库和主库不在一个IP地址上。
    4.什么是slots?
        1)一个 Redis 集群包含 16384 个插槽（hash slot）， 数据库中的每个键都属于这 16384 个插槽的其中一个，
        集群使用公式 CRC16(key) % 16384 来计算键 key 属于哪个槽， 其中 CRC16(key) 语句用于计算键 key 的 CRC16 校验和 。
        2)集群中的每个节点负责处理一部分插槽。 举个例子， 如果一个集群可以有主节点， 其中:
            节点 A 负责处理 0 号至 5500 号插槽。
            节点 B 负责处理 5501 号至 11000 号插槽。
            节点 C 负责处理 11001 号至 16383 号插槽。
    5.在集群中录入值:
        1)在redis-cli每次录入、查询键值，redis都会计算出该key应该送往的插槽，如果不是该客户端对应服务器的插槽，redis会报错，并告知应前往的redis实例地址和端口。
        2)redis-cli客户端提供了 –c 参数实现自动重定向。
            如 redis-cli  -c –p 6379 登入后，再录入、查询键值对可以自动重定向。
        3)不在一个slot下的键值，是不能使用mget,mset等多键操作。
        4)可以通过{}来定义组的概念，从而使key中{}内相同内容的键值对放到一个slot中去。
    6.查询集群中的值:
        CLUSTER KEYSLOT <key> 计算键 key 应该被放置在哪个槽上。
        CLUSTER COUNTKEYSINSLOT <slot> 返回槽 slot 目前包含的键值对数量。  
        CLUSTER GETKEYSINSLOT <slot> <count> 返回 count 个 slot 槽中的键。
    7.故障恢复:
        如果主节点下线？从节点能否自动升为主节点？
            从节点会自动升为主节点。默认时间为15s
        主节点恢复后，主从关系会如何？
            主机上线后，会成为从机。
        如果所有某一段插槽的主从节点都当掉，redis服务是否还能继续？
            会执行。除非设置了参数:cluster-require-full-coverage
    8.优点:
        实现扩容
        分摊压力
        无中心配置相对简单
    9.缺点:
        多键操作是不被支持的
        多键的Redis事务是不被支持的。lua脚本不被支持。
        由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。